html
  head
    title AudioCare
    link(rel="stylesheet" href="/style.css")
    script(type="text/javascript" src="/index.js")
    script(type="text/javascript" src="https://unpkg.com/vue")
    script(type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js")
    script(type="text/javascript" src="https://unpkg.com/vue-chartjs/dist/vue-chartjs.min.js")
  body
    div#app
      div
        button(@click="scan()") Scan for devices
      div.devices
        div.device(v-for="(device,i) in devices")
          h3 {{ device.name }}
          p
            button(@click="enable(device)" v-if="!device.enabled") Enable
            button(@click="disable(device)" v-if="device.enabled") Disable
            button(@click="up(i)") +1s
          .graph
            line-chart(:chart-data="device.data", :options="device.options")

    script.
      let info = console.info

      var app = new Vue({
        el: '#app',
        components: {
          'line-chart': {
            extends: VueChartJs.Line,
            mixins: [VueChartJs.mixins.reactiveProp],
            props: ['chartData','options'],
            mounted() {
              console.info(this)
              this.renderChart(this.chartData, this.options)
            }
          }
        },
        data() {
          return {
            message: 'Hello Vue!',
            datas : []
          }
        },
        methods: {
          scan() {
            this.devices = [];
            this.devices[0] = this.device1
            /*
            this.devices[0] = {
              id : '001', name: 'Device #001', enabled: true,
              data : this.dataset1, options : options
            }
            */
            info(this.devices)
          },
          up() {
            for (let ds of this.datasets) {
              ds.shift()
              ds.push(
                [ this.label, Math.round(Math.random() * 100) ]
              )
            }
            // this.dataset1_full.push(this.dataset1_full.shift())
            // this.device1.index = this.index
            // info('global index increased to '+this.index)
          },
          rand(min, max) {
            min = parseInt(min)
            max = parseInt(max)
            return Math.floor(Math.random() * (max - min + 1)) + min;
          },
          label(forced) {
            let t = window.Date.now()
            let l
            if (forced != 0) {
              let s = t.getSeconds()
              s = s - forced
              if (s < 0) {
                s = 60 + s
              }
              l = s.toString().length == 1 ? '0' + s.toString() : s
            } else {
              l = t.format("ss")
            }
            info('label(' + forced + ')', l)
            return l
          },
          enable(device) {
            device.enabled = true
            /*
            this.renderChart({
              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
              datasets: [
                {
                  label: 'Data One',
                  backgroundColor: '#f87979',
                  data: [40, 39, 10, 40, 39, 80, 40]
                }
              ]
            }, {responsive: true, maintainAspectRatio: false})
            */
          },
          disable(device) {
            device.enabled = false
          }
        },
        computed : {
          devices() {
            return [
              this.device1
            ]
          },
          labels() {
            info('labels recomp')
            let index = this.index
            let size = 6
            info(index,index+size)
            this.labels_full.slice(index,index+size)
          },
          device1() {
            let options = {
              responsive: true,
              maintainAspectRatio: false,
              animation: {
                duration: 0
              },
              scales: {
                yAxes: [{
                  ticks: {
                    min: 0,
                    max: 9
                  }
                }]
              }
            }
            return {
              id: '001',
              name: 'Device #001',
              enabled: true,
              rawData : this.datas[0],
              data: this.dataset1,
              options: options,
              index: 0
            }
          },
          datasets() {
            return [
              this.dataset1,
            ]
          },
          dataset1() {
            let ds = ['00','00','00'];
            let data = [0,0,0]
            let len = 3
            let size = 3;
            for (let i = len - size; i < ds.length; i++) {
              labels.push(ds[i][0])
              data.push(ds[i][1])
            }
            info(labels,data)
            let ret = {
              labels,
              datasets: [
                {
                  label: 'Data One',
                  backgroundColor: '#f87979',
                  data
                }
              ]
            }
            info(ret)
            return ret
          }
        },
        mounted() {
          for (d of this.datas) {
            d.push(this.label(-5),this.rand(1,5))
          }
          // setInterval( this.up, 1000 )
        },

      });

